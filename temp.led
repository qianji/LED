This is some temp test cases
d(x,y) := x/y
f(x) := 1
m(x) := 1/(x-2)
h(x):= x+y+z where z=2 & y=3

If x=2 then g:=x+y+z where z=2 & y=3

rows := hRows U vRows U diagonals
 where
   hRows = {{1,2,3},{4,5,6},{7,8,9}} &
   vRows = {{1,4,7},{2,5,8},{3,6,9}} &
   diagonals = {{1,5,9},{3,5,7}}
h(x) iff x=1   
If x=2 then g(y) iff x=y
 rows := hRows U vRows U diagonals
 where
   hRows = {{1,2,3},{4,5,6},{7,8,9}} & 
   vRows = {{1,4,7},{2,5,8},{3,6,9}} &
   diagonals = {{1,5,9},{3,5,7}}
/--
d:(Rat*Rat)->Int
d(x,y) := x/y
h:Rat->Int
h(x) iff x=1
--/

Program: Tic Tac Toe
Author : J. Nelson Rushton
Date   : October, 2014


This program defines a simple tic tac toe game in the functional
language LED. Formal LED definitions appear between code and end-
code delimiters, written respectively as as a slash followed
by one or more dashes, and one or more dashes followed by a slash.
All other text is informal, documentary text.


======================================================================
Data Model
======================================================================

This section defines the data types used to define the
game of tic tac toe.


A *cell* is a natural number in the interval {1..9}. Cells
represent squares on the tic tac toe board as pictured below.

  1|2|3
  -----
  4|5|6
  -----
  7|8|9


/-----------------
 Cell :=  {1..9}
------------------/

A *player* is the string "x" or the string "o".

/---------------------
 Player :=  {"x","o"}
----------------------/

A *move* is a pair (p,c) where p is a player and c is a cell.

/--------------------------
 Move :=  Player * Cell
---------------------------/

A *state* is a finite set of moves. A state is interpreted as
the set of moves made so far in a given game. For example, the
state {("x",1),("o",5)} represents the game condition where there
is there is an "x" in cell 1 and an "o" in cell 5.

/------------------------
 State :=  Set(Move)
-------------------------/


In this document, we will use the variables c, p, m, and S to vary
over cells, players, moves, and states, respectively.


======================================================================
Game Rules
======================================================================


This section defines the rules of tic tac toe, in terms of

  *) the initial state of the game,
  *) whether or not a given move is legal in a given state,
  *) the result of making a given move in a given state, and
  *) conditions under which the game is over.


Since no moves have been made when the game begins, the initial state
is the empty set.

/-------------------
 initialState := {}
--------------------/
Write *gameOver(S)* to mean the game is over in state S.
This is true in case either player has three in a line,
or nine moves have been made.

/-----------------------------------------------------
 gameOver: State -> Bool

 gameOver(S) iff
  threeInLine("x",S) or threeInLine("o",S) or |S|=9
------------------------------------------------------/
Write *threeInLine(p,S)* to mean that in state S, player p occupies
every cell in some line.


/----------------------------------------------
 threeInLine: Player*State -> Bool

 threeInLine(p,S) iff
   some L in lines. all c in L. (p,c) in S
-----------------------------------------------/
A *line* is a set of three cells in a row. We will write *lines*
for the set of lines.

/-----------------------------

If L1={{1,2,3},{4,5,6},{7,8,9}} & L2={ {1,4,7},{2,5,8},{3,6,9}} & L3={{1,5,9},{3,5,7}} then
	lines := L1 U L2 U L3
-------------------------------/

