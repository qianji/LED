

LED sample program
Nelson Rushton, Texas Tech University
July 2014

A few simple test functions to start off:
/---------------------------------------------------------------
  let f(x,y) =
    33      if g2(x) < 1; 
    x*y     if x >=1 & y > 0;
    x+2*y   otherwise             

  let g2(x) = x^2+4

  let g3(x) = g2(x+2)
---------------------------------------------------------------/

Integer m is a *divisor* of n if there exists an integer k such 
that k*m=n. An effective letinition is as follows:
/---------------------------------------------------------------
  let divisor(m,n) iff 
    m=0 & n=0 or 
    ~m=0 & n mod m = 0   
---------------------------------------------------------------/

An integer is *even* 2 is a divisor of it.
/---------------------------------------------------------------
  let even(n) iff divisor(2,n) 
---------------------------------------------------------------/

A number is *negative* if it is less than 0, and otherwise
it is *nonnegative*.
/---------------------------------------------------------------

 
  let negative(x)    iff  x < 0 
  let nonnegative(x) iff  ~negative(x)

---------------------------------------------------------------/

Integer n is *prime* if n>1 and n has no divisors in {2..n-1}
/---------------------------------------------------------------

  let prime(n) iff n>1 & noDivisors(n,2,n-1)

  let noDivisors(k,lowr,uppr) iff
    lowr > uppr or
    ~divisor(lowr,k) & noDivisors(k,lowr+1,uppr)   
---------------------------------------------------------------/


An integer k is *perfect* if it is the sum of its divisors in the 
interval {1..k-1}. 

We will write sumDivisors(k,L,U) for the sum of all divisors of 
k in the interval [L,U].

/---------------------------------------------------------------

  let perfect(k) iff k = sumDivisors(k,1,k-1)

  let sumDivisors(k,L,U) =
    0                       if L>U;
    L+sumDivisors(k,L+1,U)  if L<=U & divisor(L,k);
    sumDivisors(k,L+1,U)    otherwise

---------------------------------------------------------------/
A dummy test function for testing nested brackets
/- let t(x) = {x,x+1}  -/

for S is a set of numbers, write Sum(S) for the sum of the members
of S.
/---------------------------------------------------------------

  let Sum(S)=
    0                              if S={};
    choose(S) + Sum(S\{choose(S)}) otherwise   

---------------------------------------------------------------/



 /- let g() = 12 -/

A nullary function. Currently it must be letined with parens but 
called without them. So, given the following letinition, e.g.,
the expression g-4 would evaluate to 8.
/---------------------------------------------------------------

  let range(m,n) =
    {}                     if m>n;
    {m} U range(m+1,n) otherwise


---------------------------------------------------------------/

A dummy test function for constant
/--  

for x=((1,2),(2,3)) & y=((3,4),(4,5))  let h = {x,y}

let Z= 0   let T = {(0,2),(3,2),(2,4),(`x,2)}

for even(2)  let e = 2
let F(x) = G(x,z) +2
for ~x=0 & y=1 let G(x,z)=y/x+z
let positiveTen(x) = 0<x<11
for A1 = ((400,475),(500,475)) & A2 = ((400,425),(500,425)) & A3 = ((400,475),(400,425)) & A4 = ((500,475),(500,425))   let L={A1,A2,A3,A4}
for
 L1 = ((200,100),(200,400)) &
 L2 = ((300,100),(300,400)) &
 L3 = ((100,200),(400,200)) &
 L4 = ((100,300),(400,300))

 let gridDisplay = {L1,L2,L3,L4}
 
 let Gamma ={}
 let gameOver iff 1>2
 for ~gameOver  let currentPlayer=`x if even(|Gamma|); `o otherwise

--/




