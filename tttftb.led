
Tic Tac Toe
by Qianji Zheng and J. Nelson Rushton, Texas Tech University
July 12, 2014

This is an LED program that defines a simple tic tac toe game to 
run in the Easel enviornment.

The game begins with an empty grid and player x to move. When an empty cell is clicked, the player whose turn it occupies that cell and it becomes the other player's turn, until the game is over. When the game is over a message is displayed giving the result of the  game. The player can press the restart button at any time to restart the game.


======================================================================
DATA MODEL
======================================================================

The types *player*, *cell*, *move*, and *state* are defined as follows:

 *) A *player* is the symbol `x or the symbol `o.

 *) A *cell* is an integer in {1..9}. Cells represent squares on the 
    tic tac toe board as pictured below:

     1|2|3
     -----
     4|5|6
     -----
     7|8|9

 *) A *move* is a pair (p,c) where p is a player and c is a cell. 
    The move (c, p)represents a move by player p in cell c.

 *) A *state* is a set of moves, thought of as the set of moves made 
    so far in the game. In this case, the state of the game is also the 
    state of the program.

In this program, the variables *p*, *c*, and *m* will range over players, cells, and moves, respectively. The constants *Gamma* and *click* are uninterpreted constants denoting the current game state, and coordinates of the most recent mouse click in the game window, respectively.

The data model of EaselLED.py is used for images and displays.


======================================================================
GAME RULES
======================================================================

This section defines the rules of tic-tac-toe in LED.

Since the state of the game is the set of moves that have been made, the beginning state *initialState* is the empty set.

/-----------
 initialState := {} 
-------------/

*cells* is the set of all cells on the board:

/---------------------
 cells := {1..9}
---------------------/

/---------------------
 gameBoard := {1..9}
---------------------/

Player p *occupies* cell c if the move (p,c) is a member of Gamma; and cell c is *occupied* if it is occupied by `x or by `o.

/--------------------------------------------------
 occupies(p,c) iff (p,c) in Gamma
 occupied(c)   iff occupies(`x,c) or occupies(`o,c)
---------------------------------------------------/

A *row* is a set of cells that form three in a row either horizontally, vertically, or diagonally. Techincally, they could be called 'lines', but "three in a row" is an Anglo-American cultural idiom, while "three in a line" is not.

/------------------------------------------

 rows := hRows U vRows U diagonals
 where
   hRows = {{1,2,3},{4,5,6},{7,8,9}} & 
   vRows = {{1,4,7},{2,5,8},{3,6,9}} &
   diagonals = {{1,5,9},{3,5,7}}

-------------------------------------------/

Player p has *three in a row* if he occupies all of the cells in 
some row.

/---------------------------------------------
 threeInRow(p) iff 
   some R in rows. all c in R. occupies(p,c)
---------------------------------------------/

The *board is full* if all cells are occupied.

/----------------------------------
 boardFull iff 
   all c in cells. occupied(c)
-----------------------------------/

The *game is over* if either the board is full, or one of the players 
has three in a row. 

/------------------------------------------------- 
gameOver iff
    boardFull or threeInRow(`x) or threeInRow(`o)
-------------------------------------------------/

If the game is not over, the *player to move* is `x if an even number of moves have been made, 
and `o otherwise.

/-----------------------
 If ~gameOver then
   currentPlayer :=
     `x if even(|Gamma|);
     `o otherwise
 
 even(n) iff n mod 2=0
------------------------/

*legalToMoveIn(c)* means that it is legal for the player whose turn it is to move in cell c in the current state of the game -- that is, if the game is not over and the cell is not occupied.

/----------------------------------------------- 
 legalToMoveIn(c) iff  ~occupied(c) &  ~gameOver   
------------------------------------------------/


======================================================================
VIDEO OUTPUT
======================================================================

The default color used in this game is BLACK
/----------------------------
BLACK := (0,0,0)
WHITE := (255, 255, 255)
BLUE := (0,0,255)
GREEN := (  0, 255,   0)
RED := (255,   0,   0)
-----------------------------/
This section defines the *display* function, specifying the images to display on the screen in each game state. The data model for this section can be found in EaselLED.py.
The  *grid* consists is a set of four line segments that make up the tic tac toe playing area.  

/----------------------------
gridDisplay := {L1,L2,L3,L4} 
where
 L1 = (`seg,(200,100),(200,400),BLACK) &
 L2 = (`seg,(300,100),(300,400),BLACK) &
 L3 = (`seg,(100,200),(400,200),BLACK) &
 L4 = (`seg,(100,300),(400,300),BLACK)
-----------------------------/

The default font size for displayed text in this program is 36.

/--------------
 fontSize := 36
---------------/

*centerX(c)* and *centerO(c)* are the x and y coordinates of the center of cell c, respectively.

/-----------------------------------
 centerX(c):= 150+100*((c-1) mod 3)
 centerO(c):= 350-100*(floor((c-1)/3))
------------------------------------/

*cellDisplay(c)* is a display of a text character 'x' or an 'o' in cell c, or the empty display, respectively in case cell c is occupied by `x, occupied by `o, or not occupied in the current game state. 

/-----------------------------------------------
xImage(c):=
  (`txt,"x",(centerX(c), centerO(c)),fontSize,BLUE)
  
 oImage(c) :=
  (`txt,"o",(centerX(c), centerO(c)),fontSize,GREEN)

 cellDisplay(c) :=
    {xImage(c)} if (`x,c) in Gamma;  
    {oImage(c)} if (`o,c) in Gamma; 
    {}          otherwise
------------------------------------------------/

*playerImages* is the set of all images of x's and o's on the board in the current state.

/--------------------------------------
 cellDisplays :=
    Union[c in gameBoard] cellDisplay(c)
---------------------------------------/

If the game is not over, *currentPlayerDisplay* is a text in the upper left hand region of the game window indicating the player to move, either "play x's turn" or "play o's turn", 

/-----------------------------------------------------

 currentPlayerDisplay := 
   {(`txt,"x's turn",(100,50),fontSize,BLACK)} if currentPlayer=`x;
   {(`txt,"o's turn",(100,50),fontSize,BLACK)} if currentPlayer=`o
--------------------------------------------------------/


The *restart button* consists of a rectangle around a "restart" text, displayed in the upper right region of the screen. Formally, it is a set of four line segments and a text.
/------------------------------------
 restartButton := {A1,A2,A3,A4,txt}
 where
   A1 = (`seg,(400,25),(500,25),BLACK) &
   A2 = (`seg,(400,75),(500,75),BLACK) &
   A3 = (`seg,(400,25),(400,75),BLACK) &
   A4 = (`seg,(500,25),(500,75),BLACK) &
   txt = (`txt,"restart",(450, 50), fontSize,BLACK)
-------------------------------------/
 
If the game is over, *gameResultDisplay* is a display in the upper left region of the screen telling the outcome of the game, either 'x won!', "o won!", or "The cat got it!"

/-------------------------------------------------------

 If gameOver then
 gameResultDisplay := 
    {(`txt,"x won",(100,50),fontSize,BLUE)} if threeInRow(`x);
    {(`txt,"o won",(100,50),fontSize,GREEN)} if threeInRow(`o);
    {(`txt,"cat got it",(100,50),fontSize,RED)}  otherwise
---------------------------------------------------------/

The *display* is the screen display for the current game state. The grid, cell displays, and restart button are always displayed. Additionally, the display includes the game results if the game is over, and the player to move if the game is not over.  

/------------------------------------------
 alwaysDisplay :=
   gridDisplay  U cellDisplays  U restartButton 

 gameInPlayDisplay := 
   alwaysDisplay U currentPlayerDisplay

 gameOverDisplay := 
   alwaysDisplay U gameResultDisplay

 images(S) := 
   gameOverDisplay(S)   if gameOver(S);
   gameInPlayDisplay(S) otherwise
------------------------------------------/


======================================================================
MOUSE INPUT
======================================================================

This section defines *update*, which specifies the program's response to mouse input. The variable *pt* will vary over points. 


*xMin(c)*, *xMax(c)*, *yMin(c)*, and *yMax(c)* denote the graphical boundaries of cell c, in the obvious manner.

/----------------------------------
 xMin(c) := 100+100*((c-1) mod 3) 
 xMax(c) := 200+100*((c-1) mod 3)
 yMin(c) := 300-100*(floor((c-1)/3))
 yMax(c) := 400-100*(floor((c-1)/3)) 
------------------------------------/

The x and y coordinates of a point are its 1st and 2nd coordinates, respectively.

/-------------------------------------------
 xCoord(pt):= pt[1]     yCoord(pt):= pt[2]
--------------------------------------------/

clicked(c) means that cell c has been clicked. 

/------------------------------------------------------------
 clicked(c,I) iff 
   (xCoord(I[1])>xMin(c)) & (xCoord(I[1])< xMax(c)) &
   (yCoord(I[1])>yMin(c)) & (yCoord(I[1])< yMax(c))
-------------------------------------------------------------/

*restartClicked* means that the most recent mouse click is inside the region of the play again button.

/-------------------------------------------
 restartClicked(I) iff 
   xCoord(I[1])>400 & xCoord(I[1])<500 & 
   yCoord(I[1])>0 & yCoord(I[1])<100
---------------------------------------------/

*moveMade(c)* means that cell c has been clicked and the player to move may legally move there. *movesMade* is the set of all moves made by the most recent mouse click, which will either be a singleton or empty.

/-------------------------------------------------------------
 moveMadeIn(c,I) iff clicked(c,I) & legalToMoveIn(c)

 movesMade(I) := {(currentPlayer,c) | c in cells & moveMadeIn(c,I)}
--------------------------------------------------------------/


/---------------------------------------
 newState := 
  initialState               if restartClicked;
  Gamma U movesMade  otherwise
----------------------------------------/

/----------------------------------------
  transition(I) :=
    initialState  if restartClicked(I);
    Gamma U movesMade(I)  otherwise
-----------------------------------------/










